install_from_swirl("Regression Models")
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent,galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3,
| col='red')
abline(regrline, lwd=3, col='red')
summary(regrline)
fit = lm(child ~ parent, data = galton)
summary(fit)
fit$residuals
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic = fit$coef[1]
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
rhs - lhs
lhs - rhs
all.equal(lhs, rhs)
varChild <- var(child)
v
var
varChild <- var(galton$child)
varRes <- fit$residuals
varRes <- var(fit$residuals)
est
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild, varRes)
all.equal(varChild, varEst + varRes)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
cor(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
cor(gpa_nor, gch_nor)
f
l_nor <- lm(gch_nor ~ gpa_nor)
4
fit <- lm(child ~ parent, galton)
e
f
sqrt(sum(fit$residuals^2) / (n - 2))
summary(fit)$sigma
deviance(fit)/(n-2)
sqrt(deviance(fit)/(n-2))
f
mu <- mean(galton$child)
f
sTot <- sum((galton$child-mu)^2)
f
sRes <- deviance(fit)
f
1-sRes/sTot
f
summary(fit)$r.squared
f
cor(galton$parent,galton$child)^2
f
ones <- rep(1, nrow(galton))
f
swirl()
f
swirk()
swirl()
lm(child ~ ones + parent -1, galton)
lm(child ~ parent, galton)
r
t
swirl()
lm(child ~ 1, galton)
head(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~ Height + Constant -1,
| trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
str(swiss)
all <- lm(Fertility ~ ., swiss)
summary(all)
head(swiis)
head(swiss)
summary(lm(Fertility ~ Agriculture, swiss))
cor()
cor(x)
head(swiss)
cor(swiss$Examination,swiss$Education)
cor(swiss$Examination,swiss$Education)
cor(swiss$Agriculture,swiss$Education)
cor(swiss$Agriculture,swiss$Education)
makelms()
makelms()
ec <- swiss$Examination+swiss$Catholic
ec <- swiss$Examination+swiss$Catholic
efit <- lm(Fertility ~ . + ec, swiss)
efit <- lm(Fertility ~ . + ec, swiss)
all$coefficients-efit$coefficients
all$coefficients-efit$coefficients
all$coefficients-efit$coefficients
dim(InsectSprays)
dim(InsectSprays)
head(InsectSprays,15)
head(InsectSprays,15)
sB
sB
summary(InsectSprays[,2])
summary(InsectSprays[,2])
sapply(InsectSprays,class)
sapply(InsectSprays,class)
fit <- lm(count ~ spray, InsectSprays)
fit <- lm(count ~ spray, InsectSprays)
summary(fit)$coef
summary(fit)$coef
est <- summary(fit)$coef[,1]
est <- summary(fit)$coef[,1]
mean(sA)
mean(sA)
mean(sB)
mean(sB)
nfit <- lm(count ~ spray - 1, InsectSprays)
nfit <- lm(count ~ spray - 1, InsectSprays)
summary(nfit)$coef
summary(nfit)$coef
spray2 <- relevel(InsectSprays$spray,\"C\")
spray2 <- relevel(InsectSprays$spray,\"C\")
spray2 <- relevel(InsectSprays$spray,\"C\")
spray2 <- relevel(InsectSprays$spray,"C\")
summary(nfit)$coef
spray2 <- relevel(InsectSprays$spray,\"C\")
?relevel
spray2 <- relevel(InsectSprays$spray,"C")
?relevel
spray2 <- relevel(InsectSprays$spray,"C")
fit2 <- lm(count ~ spray2, InsectSprays)
fit2 <- lm(count ~ spray2, InsectSprays)
summary(fit2)$coef
summary(fit2)$coef
mean(sC)
mean(sC)
(fit$coef[2]-fit$coef[3])/1.6011
(fit$coef[2]-fit$coef[3])/1.6011
dim(hunger)
13
948
dim(hunger)
names(hunger)
names(hunger)
fit <- lm(hunger$Numeric ~ hunger$Year)
fit <- lm(hunger$Numeric ~ hunger$Year)
summary(fit)$coef
summary(fit)$coef
lmF <-
| lm(Numeric[Sex=="Female"] ~ Year[Sex=="Female"],hunger)
lmF <- lm(Numeric[Sex=="Female"] ~ Year[Sex=="Female"],hunger)
lmM <- lm(Numeric[Sex=="Male"] ~ Year[Sex=="Male"],hunger)
lmM <- lm(Numeric[Sex=="Male"] ~ Year[Sex=="Male"],hunger)
lmBoth <- lm(hunger$Numeric ~ hunger$Year + hunger$Sex)
lmBoth <- lm(hunger$Numeric ~ hunger$Year + hunger$Sex)
summary(lmBoth)
summary(lmBoth)
lmInter <- lm(Numeric ~ Year + Sex +
| Year*Sex, hunger)
lmInter <- lm(Numeric ~ Year + Sex + Year*Sex, hunger)
lmInter <- lm(Numeric ~ Year + Sex + Year*Sex, hunger)
summary(lmInter)
summary(lmInter)
fit <- lm(y ~ x, out2)
fit <- lm(y ~ x, out2)
plot(fit, which=1)
plot(fit, which=1)
fitno <- lm(y ~ x, out2[-1, ])
fitno <- lm(y ~ x, out2[-1, ])
plot(fitno, which=1)
plot(fitno, which=1)
coef(fit)-coef(fitno)
coef(fit)-coef(fitno)
head(dfbeta(fit))
head(dfbeta(fit))
resno <- out2[1, "y"] - predict(fitno, out2[1,])
resno <- out2[1, "y"] - predict(fitno, out2[1,])
1-resid(fit)[1]/resno
1-resid(fit)[1]/resno
head(hatvalues(fit))
head(hatvalues(fit))
sigma <- sqrt(deviance(fit)/df.residual(fit))
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd <- resid(fit)/(sigma * sqrt(1-hatvalues(fit)))
rstd <- resid(fit)/(sigma * sqrt(1-hatvalues(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit, which=3)
plot(fit, which=3)
plot(fit, which=2)
plot(fit, which=2)
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
head(rstudent(fit))
dy <- predict(fitno, out2)-predict(fit, out2)
dy <- predict(fitno, out2)-predict(fit, out2)
sum(dy^2)/(2*sigma^2)
sum(dy^2)/(2*sigma^2)
plot(fit, which=5)
plot(fit, which=5)
rgp1()
rgp2()
rgp2()
head(swiss)
head(swiss)
mdl <- lm(Fertility ~ ., swiss)
mdl <- lm(Fertility ~ ., swiss)
vif(mdl)
vif(mdl)
mdl2 <- lm(Fertility ~ . -Examination, swiss)
vif(mdl2)
vif(mdl2)
x1c <- simbias()
x1c <- simbias()
apply(x1c, 1, mean)
apply(x1c, 1, mean)
fit1 <- lm(Fertility ~ Agriculture, swiss)
fit1 <- lm(Fertility ~ Agriculture, swiss)
fit3 <- lm(Fertility ~ Agriculture + Examination + Education, swiss)
fit3 <- lm(Fertility ~ Agriculture + Examination + Education, swiss)
anova(fit1, fit3)
anova(fit1, fit3)
deviance(fit3)
1
d <- deviance(fit3)/43
d <- deviance(fit3)/43
n <- (deviance(fit1) - deviance(fit3))/2
n <- (deviance(fit1) - deviance(fit3))/2
n/d
n/d
pf(n/d, 2, 43, lower.tail=FALSE)
pf(n/d, 2, 43, lower.tail=FALSE)
shapiro.test(fit3$residuals)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
anova(fit1, fit3, fit5, fit6)
View(ravenData)
View(ravenData)
mdl <- glm(ravenWinNum ~ ravenScore, binomial, ravenData)
mdl <- glm(ravenWinNum ~ ravenScore, binomial, ravenData)
lodds <- predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
lodds <- predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
exp(lodds)/(1+exp(lodds))
exp(lodds)/(1+exp(lodds))
summary(mdl)
summary(mdl)
exp(confint(mdl))
exp(confint(mdl))
anova(mdl)
anova(mdl)
qchisq(0.95, 1)
qchisq(0.95, 1)
var(rpois(1000, 50))
View(hits)
View(hits)
class(hits[,'date'])
class(hits[,'date'])
as.integer(head(hits[,'date'])
as.integer(head(hits[,'date'])
)
)
as.integer(head(hits[,'date']))
mdl <- glm(visits ~ date, poisson, hits)
summary(mdl)
summary(mdl)
exp(confint(mdl, 'date'))
exp(confint(mdl, 'date'))
which.max(hits[,'visits'])
which.max(hits[,'visits'])
hits[704,]
hits[704,]
lambda <- mdl$fitted.values[704]
lambda <- mdl$fitted.values[704]
qpois(0.95, lambda)
qpois(0.95, lambda)
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits, offset = log(visits + 1))
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits, offset = log(visits + 1))
qpois(.95, mdl2$fitted.values[704])
swirl()
>swirl
?swirl
swirl()
library(gmap)
library(ggmap)
?geocode()
geocode('Moscow')
library(shiny)
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("Hello World!"),
# Sidebar with a slider input for the number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 5,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
))
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
str(segmentationOriginal)
trainSet <- segmentationOriginal[segmentationOriginal$Case == 2,]
testSet <- segmentationOriginal[segmentationOriginal$Case == 1,]
View(segmentationOriginal)
trainSet <- segmentationOriginal[segmentationOriginal$Case == 'Train',]
testSet <- segmentationOriginal[segmentationOriginal$Case == 'Test',]
seed(125)
set.seed(125)
modfit <- train(Class ~ ., method = 'rpart', data = trainSet)
install.packages('rpart')
install.packages("rpart")
library(rpart)
library(caret)
library(AppliedPredictiveModeling)
modfit <- train(Class ~ ., method = 'rpart', data = trainSet)
View(trainSet)
install.packages('e1071', dependencies=TRUE)
library(e1071)
modfit <- train(Class ~ ., method = 'rpart', data = trainSet)
print(modfit$FinalModel)
print(modfit$finalModel)
library(rattle)
istall.packages('rattle')
install.packages('rattle')
library(rattle)
fancyRpartPlot(modfit$finalModel)
?fancyRpartPlot
?rpart.plot
?rpart.plot
??rpart.plot
print(modfit$finalModel)
fancyRpartPlot(modfit$finalModel)
library(rplot)
library(rpart)
fancyRpartPlot(modfit$finalModel)
library(rattle)
fancyRpartPlot(modfit$finalModel)
rattle()
library(rattle)
fancyRpartPlot(modfit$finalModel)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
trainSet <- segmentationOriginal[segmentationOriginal$Case == 'Train',]
testSet <- segmentationOriginal[segmentationOriginal$Case == 'Test',]
set.seed(125)
modfit <- train(Class ~ ., method = 'rpart', data = trainSet)
print(modfit$finalModel)
library(rattle)
fancyRpartPlot(modfit$finalModel)
rattle()
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
trainSet <- segmentationOriginal[segmentationOriginal$Case == 'Train',]
testSet <- segmentationOriginal[segmentationOriginal$Case == 'Test',]
set.seed(125)
modfit <- train(Class ~ ., method = 'rpart', data = trainSet)
print(modfit$finalModel)
library(rattle)
fancyRpartPlot(modfit$finalModel)
rattle()
rattle()
fancyRpartPlot(modfit$finalModel)
library(rattle)
rattle()
install.packages("combinat")
require(combinat)
permn(3)
combn(3, 2)
dim(combn(3,2))[2]
(dim(combn(10,3))[2] + dim(combn(6,2))[2] )  / dim(combn(16,5))[2]
(dim(combn(10,3))[2] * dim(combn(6,2))[2] )  / dim(combn(16,5))[2]
1 - (dim(combn(10,2))[2] * dim(combn(6,3))[2] )  / dim(combn(16,5))[2] -
(dim(combn(10,1))[2] * dim(combn(6,4))[2] )  / dim(combn(16,5))[2] -
(dim(combn(10,0))[2] * dim(combn(6,5))[2] )  / dim(combn(16,5))[2]
(dim(combn(10,2))[2] * dim(combn(6,3))[2] )  / dim(combn(16,5))[2]
(dim(combn(10,1))[2] * dim(combn(6,4))[2] )  / dim(combn(16,5))[2]
(dim(combn(10,0))[2] * dim(combn(6,5))[2] )  / dim(combn(16,5))[2]
1 - (dim(combn(10,2))[2] * dim(combn(6,3))[2] )  / dim(combn(16,5))[2] -
(dim(combn(10,1))[2] * dim(combn(6,4))[2] )  / dim(combn(16,5))[2] -
(dim(combn(10,0))[2] * dim(combn(6,5))[2] )  / dim(combn(16,5))[2]
dim(combn(6,5))[2] )  / dim(combn(16,5))[2]
dim(combn(6,5))[2] )  / dim(combn(16,5))[2]
dim(combn(6,5))[2] / dim(combn(16,5))[2]
1 - (dim(combn(10,2))[2] * dim(combn(6,3))[2] )  / dim(combn(16,5))[2] -
(dim(combn(10,1))[2] * dim(combn(6,4))[2] )  / dim(combn(16,5))[2] -
dim(combn(6,5))[2]  / dim(combn(16,5))[2]
dim(combn(8,5))[2] * 0.6^8 * 0.4^3
dim(combn(8,5))[2] * 0.6^5 * 0.4^3
install.packages('shiny')
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Illustrating markup"),
sidebarPanel(
h1('Sidebar panel'),
h1('H1 text'),
h2('H2 Text'),
h3('H3 Text'),
h4('H4 Text')
),
mainPanel(
h3('Main Panel text'),
code('some code'),
p('some ordinary text')
)
))
runApp()
setwd('~/Desktop/Educate yourself/Developing Data Products')
runApp(ui.R)
runApp('ui.R')
runApp()
?runApp()
?runApp('ui')
runApp('ui')
getwd()
?shinyUI
shinyServer(function(input, output) {
# Expression that generates a plot of the distribution. The expression
# is wrapped in a call to renderPlot to indicate that:
#
#  1) It is "reactive" and therefore should be automatically
#     re-executed when inputs change
#  2) Its output type is a plot
#
output$distPlot <- renderPlot({
# generate an rnorm distribution and plot it
dist <- rnorm(input$obs)
hist(dist)
})
})
shinyServer(
function(input, output) {
}
)
runApp()
runApp()
runApp()
??LeafLet
install.packages('rCharts')
require(rCharts)
map1 = Leaflet$new()
map1$setView(c(45.5236, -122.675), 13)
map1$tileLayer("http://a.tiles.mapbox.com/v3/mapbox.control-room/{z}/{x}/{y}.png", zoom = 8)
map1
..p.()
map1 = Leaflet$new()
map1$setView(c(45.50867, -73.55399), 13)
map1
map1 = Leaflet$new()
map1$setView(c(55.7500, 37.6167), 13)
map1
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
library(airquality)
data(airquality)
dTable(airquality, sPaginationType = "full_numbers")
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
